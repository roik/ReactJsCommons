#!/bin/bash

protected_branches=("master" "release")

policy='[Policy] Never force push or delete the '$protected_branch' branch! (Prevented with pre-push hook.)'

current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

push_command=$(ps -ocommand= -p $PPID)

do_exit(){
  echo $policy
  exit 1
}

check_branch(){


    protected_branch = $1
    will_remove_protected_branch=':'$protected_branch
	if [[ $push_command =~ $is_destructive ]] && [ $current_branch = $protected_branch ]; then
	  do_exit
	fi

	if [[ $push_command =~ $is_destructive ]] && [[ $push_command =~ $protected_branch ]]; then
	  do_exit
	fi

	if [[ $push_command =~ $will_remove_protected_branch ]]; then
	  do_exit
	fi

	# Prevents makes sure while you are on different branch, you don't push to protected branch
	if [ $current_branch != $protected_branch ] && [[ $push_command =~ $protected_branch ]]; then
	  do_exit
	fi
}

for protected_branch in "${protected_branches[@]}"
do
        will_remove_protected_branch=':'$protected_branch
    	if [[ $push_command =~ $is_destructive ]] && [ $current_branch = $protected_branch ]; then
    	  do_exit
    	fi

    	if [[ $push_command =~ $is_destructive ]] && [[ $push_command =~ $protected_branch ]]; then
    	  do_exit
    	fi

    	if [[ $push_command =~ $will_remove_protected_branch ]]; then
    	  do_exit
    	fi

    	# Prevents makes sure while you are on different branch, you don't push to protected branch
    	if [ $current_branch != $protected_branch ] && [[ $push_command =~ $protected_branch ]]; then
    	  do_exit
    	fi
done

unset do_exit

exit 0